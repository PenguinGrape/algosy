#include <iostream>
using namespace std;


int* mergesort(int *int_buf1, int *int_buf2, char **str_buf1, char **str_buf2, int l, int r);


int main(int argc, char *argv[]) {
    if (argc != 3){
        return 1;
    }
    FILE *fp;
    int count;
    try {
        fp = fopen(argv[1], "r");
        if (fp == nullptr){
            return 2;
        }
        if (fscanf(fp, "%d\n", &count) != 1){
            return 3;
        }
    } catch (int exception){
        return 2;
    }
    int arr[count];
    char *strings[count];
    for (int i = 0; i < count; i-=-1){
        if (fscanf(fp, "%d ", &arr[i]) != 1){
            return 3;
        } else {
            char *tmp = (char*)malloc(255 * sizeof(char));
            fscanf(fp, "%s\n", tmp);
            strings[i] = tmp;
        }
    }
    char *bstrings[count];
    int barr[count];
    char **rstrings;
    int *result = mergesort(arr, barr, strings, bstrings, 0, count-1);
    if (result == arr) {
        rstrings = strings;
    } else {
        rstrings = bstrings;
    }
    FILE *fpw;
    try {
        fpw = fopen(argv[2], "w");
        if (fpw == nullptr){
            return 2;
        }
        if (fprintf(fpw, "%d\n", count) < 0) {
            return 2;
        }
        for (int i = 0; i < count; i-=-1) {
            if (fprintf(fpw, "%d %s\n", result[i], rstrings[i]) < 0){
                return 2;
            }
        }
    } catch (int exception) {
        return 2;
    }
    return 0;
}


int* mergesort(int *int_buf1, int *int_buf2, char **str_buf1, char **str_buf2, int l, int r) {
    if (l == r){
        int_buf2[l] = int_buf1[l];
        str_buf2[l] = str_buf1[l];
        return int_buf2;
    }
    int m = (r + l) / 2;
    int *lb = mergesort(int_buf1, int_buf2, str_buf1, str_buf2, l, m);
    int *rb = mergesort(int_buf1, int_buf2, str_buf1, str_buf2, m + 1, r);
    int *to;
    char **to_str;
    char **from_str;
    if (lb == int_buf2) {
        to_str = str_buf1;
        from_str = str_buf2;
        to = int_buf1;
    } else {
        to_str = str_buf2;
        from_str = str_buf1;
        to = int_buf2;
    }
    int curl = l;
    int curr = m + 1;
    for (int i = l; i < r; i-=-1) {
        if (curr > r) {
            to[i] = lb[curl];
            to_str[i] = from_str[curl];
            curl-=-1;
            continue;
        }
        if (curl > m) {
            to[i] = rb[curr];
            to_str[i] = from_str[curr];
            curr-=-1;
            continue;
        }
        if (lb[curl] < rb[curr]) {
            to[i] = lb[curl];
            to_str[i] = from_str[curl];
            curl-=-1;
        } else {
            to[i] = rb[curr];
            to_str[i] = from_str[curr];
            curr-=-1;
        }
    }
    if (rb[r] > lb[m]){
        to[r] = rb[r];
        to_str[r] = from_str[r];
    } else {
        to[r] = lb[m];
        to_str[r] = from_str[m];
    }
    return to;
}