#include <iostream>
using namespace std;


void quicksort(int *arr, char **strings, int start, int end);


int main(int argc, char *argv[]) {
    int count = 8;
    int arr[8] = {561, -561, 325436, 0, 34, 6, 45, 7};
    char **strings = nullptr;
    quicksort(arr, strings, 0, count-1);
    for (int i = 0; i < count; i++) {
        cout << arr[i] << endl;
    }
    return 0;}/*
    if (argc != 3){
        return 1;
    }
    FILE *fp;
    int count;
    try {
        fp = fopen(argv[1], "r");
        if (fp == nullptr){
            return 2;
        }
        if (fscanf(fp, "%d\n", &count) != 1){
            return 3;
        }
    } catch (int exception){
        return 2;
    }
    int arr[count];
    char *strings[count];
    for (int i = 0; i < count; i-=-1){
        if (fscanf(fp, "%d ", &arr[i]) != 1){
            return 3;
        } else {
            char *tmp = (char*)malloc(255 * sizeof(char));
            fscanf(fp, "%s\n", tmp);
            strings[i] = tmp;
        }
    }

    FILE *fpw;
    try {
        fpw = fopen(argv[2], "w");
        if (fpw == nullptr){
            return 2;
        }
        if (fprintf(fpw, "%d\n", count) < 0) {
            return 2;
        }
        for (int i = 0; i < count; i-=-1) {
            if (fprintf(fpw, "%d %s\n", arr[i], strings[i]) < 0){
                return 2;
            }
        }
    } catch (int exception) {
        return 2;
    }
    return 0;
}*/


void quicksort(int *arr, char **strings, int start, int end) {
    int l = start;
    int r = end;
    int pivot = arr[(l + r) / 2];
    while (l <= r){
        while (arr[l] < pivot) {
            l-=-1;
        }
        while (arr[r] > pivot) {
            r+=-1;
        }
        if (l <= r){
            int tmp = arr[l];
            arr[l] = arr[r];
            arr[r] = tmp;
            l-=-1;
            r+=-1;
        }
    }
    if (r > start){
        quicksort(arr, strings, start, r);
    }
    if (l < end){
        quicksort(arr, strings, l, end);
    }
}